using UnityEngine;
using System.Collections;
using System.Collections.Generic;

using SimpleJSON;
using KCore;

namespace KData
{

	public class //CLASS_NAME//ConfigPool
	{
		
		private static List<//CLASS_NAME//Config> dataList = new List<//CLASS_NAME//Config>();

		public static IEnumerator LoadData(string jsonFilePath)
		{
			string url = jsonFilePath;
			Debug.Log("//CLASS_NAME//ConfigPool|url|" + url);

			using (WWW w = new WWW(url))
			{
				yield return w;
				
				if (w.error != null)
				{
					Debug.LogError("//CLASS_NAME//ConfigPool|www|error|" + w.error);
					yield break;
				}

				string content = w.text;
				Debug.Log("//CLASS_NAME//ConfigPool|content|" + content);
				
				List<//CLASS_NAME//Config> tmpList = new List<//CLASS_NAME//Config>();
				string[] allLines = content.Replace("\r", "").Split(new char[] { '\n' });
				Debug.Log("allLines|" + allLines.Length);
				for (int l = 0; l < allLines.Length; l++)
				{
					if (allLines[l].Trim().Length == 0)
					{
						continue;
					}

					JSONNode jsonObject = JSON.Parse(allLines[l]);
					
					//CLASS_NAME//Config config = new //CLASS_NAME//Config();
					//FIELD_ASSIGN_STATEMENT//
					
					tmpList.Add(config);
				}

				dataList.Clear();
				dataList = tmpList;
				
				AssetBundle ab = w.assetBundle;
				if (ab != null)
				{
					//确保不会异常
					ab.Unload(true);
				}
			};
		}

		public static //CLASS_NAME//Config getByKey(//KEY_TYPE// key)
		{
			for (int i = 0; i < dataList.Count; i++)
			{
				if (dataList[i].//KEY_NAME// == key)
				{
					return dataList[i];
				}
			}

			return null;
		}

		public static List<//CLASS_NAME//Config> GetList()
		{
			return dataList;
		}
		
	}

}
